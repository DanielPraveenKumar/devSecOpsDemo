package org.workshop.coffee.repository;
 
import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
 
import java.util.Collections;
import java.util.List;
import java.util.Locale;
 
import javax.activation.DataSource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
 
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.workshop.coffee.domain.Product;
 
@SpringBootTest
class ExploitableSearchRepositoryTest {
 
private final ExploitableSearchRepository exploitableSearchRepository;
@Autowired
public ExploitableSearchRepositoryTest(ExploitableSearchRepository exploitableSearchRepository) {
    this.exploitableSearchRepository = exploitableSearchRepository ;
}


  @Mock
  private EntityManager entityManager;
  @Autowired
  EntityManager em;
 
  @Mock
  private DataSource dataSource;
 
  @InjectMocks
  private ExploitableSearchRepository repository;
 
  @Test
  public void testSearchProduct_sqlInjection() {
 
    // Test single quote injection
    List<Product> result = exploitableSearchRepository.searchProduct("test' OR '1'='1");
    //assertTrue (result.size() == 0);
    assertNotNull(result);
   
    // Test comment injection
    result = exploitableSearchRepository.searchProduct("test' --");
    assertNotNull(result);
 
    // Test union injection
    result = exploitableSearchRepository.searchProduct("test' UNION SELECT * FROM Product");
    assertNotNull(result);
 
    // Test semicolon injection
    result = exploitableSearchRepository.searchProduct("test'; DROP TABLE Product; --");
    assertNotNull(result);
 
  }
@Test
public void testSearchProduct_validInput() {
  String input = "body";
  List<Product> results = exploitableSearchRepository.searchProduct(input);
 
  assertNotNull(results);
  assertTrue(results.size() > 0);
 
}
 
 
@Test
public void testSearchProduct_emptyInput() {
  String input = "";
  List<Product> results = exploitableSearchRepository.searchProduct(input);
 
  assertNotNull(results);
  assertTrue(results.size()>0);
}
 
@Test
public void testSearchProduct_nullInput() {
  String input = null;
 

   List<Product> results = exploitableSearchRepository.searchProduct(input);
   assertNull(results); 
}
 
@Test
public void testSearchProduct_noResults() {
  String input = "xxxxxxx";
  List<Product> results = exploitableSearchRepository.searchProduct(input);
 
  assertNotNull(results);
  assertEquals(0, results.size());
}
}
 